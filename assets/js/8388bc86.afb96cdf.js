"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[20],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),p=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(i.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),h=p(n),d=r,g=h["".concat(i,".").concat(d)]||h[d]||u[d]||o;return n?a.createElement(g,s(s({ref:t},c),{},{components:n})):a.createElement(g,s({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=h;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:r,s[1]=l;for(var p=2;p<o;p++)s[p]=n[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},6815:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const o={title:"Opni Logging Setup"},s=void 0,l={unversionedId:"logging/logging",id:"logging/logging",title:"Opni Logging Setup",description:"Opni Logging{ loading=lazy }",source:"@site/docs/logging/logging.md",sourceDirName:"logging",slug:"/logging/",permalink:"/logging/",draft:!1,editUrl:"https://github.com/rancher/opni-docs/edit/main/docs/logging/logging.md",tags:[],version:"current",frontMatter:{title:"Opni Logging Setup"}},i={},p=[{value:"Install cert manager in all clusters",id:"install-cert-manager-in-all-clusters",level:3},{value:"Rancher Charts",id:"rancher-charts",level:3},{value:"Install Opni",id:"install-opni",level:3},{value:"Install Opensearch",id:"install-opensearch",level:3},{value:"Opensearch Cluster Binding",id:"opensearch-cluster-binding",level:3},{value:"Install Opni Gateway",id:"install-opni-gateway",level:3},{value:"Generate a token for bootstrapping the cluster",id:"generate-a-token-for-bootstrapping-the-cluster",level:3},{value:"Bootstrap downstream cluster",id:"bootstrap-downstream-cluster",level:3}],c={toc:p};function u(e){let{components:t,...o}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Opni Logging",src:n(165).Z,width:"581",height:"341"}),"{ loading=lazy }"),(0,r.kt)("p",null,"Following this guide will allow you to create a POC Opni logging cluster"),(0,r.kt)("h3",{id:"install-cert-manager-in-all-clusters"},"Install cert manager in all clusters"),(0,r.kt)("p",null,"All clusters need cert manager as a prerequisite.  This can be installed by following the ",(0,r.kt)("a",{parentName:"p",href:"https://cert-manager.io/docs/installation/kubectl/"},"cert manager instructions")),(0,r.kt)("h3",{id:"rancher-charts"},"Rancher Charts"),(0,r.kt)("p",null,"Opni provides helm charts that integrate with Rancher.  If you are using Rancher you can add these to the UI by adding a git repository to the Apps & Marketplace section.  The ",(0,r.kt)("inlineCode",{parentName:"p"},"Git Repo URL")," to use is:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"https://github.com/rancher/opni.git\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Git Branch")," to use is:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"charts-repo\n")),(0,r.kt)("p",null,"If you are not using Rancher please follow the instructions below."),(0,r.kt)("h3",{id:"install-opni"},"Install Opni"),(0,r.kt)("p",null,"Opni needs to be installed into all clusters - the centralized cluster, and the downstream clusters that will be shipping their logs.\nThis can be achieved by applying the following manifests from the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/rancher/opni/tree/main/deploy/manifests"},"Opni repo")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"00_crds.yaml"),(0,r.kt)("li",{parentName:"ul"},"01_rbac.yaml"),(0,r.kt)("li",{parentName:"ul"},"10_operator.yaml")),(0,r.kt)("h3",{id:"install-opensearch"},"Install Opensearch"),(0,r.kt)("p",null,"Opni makes use of, and contributes to, the official Opensearch operator.  This is currently hosted at ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/Opster/opensearch-k8s-operator"},"https://github.com/Opster/opensearch-k8s-operator"),"."),(0,r.kt)("p",null,"The cluster must be called Opni and installed into the ",(0,r.kt)("inlineCode",{parentName:"p"},"opni-cluster-system")," namespace. Create this namespace on your cluster if it does not already exist.  The following yaml can be used to create the cluster"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: opensearch.opster.io/v1\nkind: OpenSearchCluster\nmetadata:\n  name: opni\n  namespace: opni-cluster-system\nspec:\n  # Add fields here\n  general:\n    httpPort: 9200\n    vendor: opensearch\n    version: 1.3.1\n    serviceName: os-svc\n    setVMMaxMapCount: true\n  confMgmt:\n    autoScaler: false\n    monitoring: false\n  dashboards:\n    enable: true\n    version: 1.3.1\n    replicas: 1\n    image: rancher/opensearch-dashboards:1.3.1\n  nodePools:\n  - component: master\n    replicas: 3\n    diskSize: 32Gi\n    resources:\n      requests:\n        cpu: 500m\n        memory: 1Gi\n      limits:\n        memory: 1Gi\n    roles:\n    - master\n    persistence:\n      emptyDir: {}\n  - component: nodes\n    replicas: 2\n    diskSize: 32Gi\n    resources:\n      requests:\n        cpu: 500m\n        memory: 2Gi\n      limits:\n        memory: 2Gi\n    jvm: "-Xmx1G -Xms1G"\n    roles:\n    - data\n    persistence:\n      emptyDir: {}\n')),(0,r.kt)("p",null,"If you want to use persistent storage you can replace"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"emptyDir: {}\n")),(0,r.kt)("p",null,"with"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"pvc:\n  storageClass: nameofclass # Name of the storage class you wish to use\n  accessModes:\n  - ReadWriteOnce\n")),(0,r.kt)("p",null,"You will also need to expose the Opensearch cluster.  For indexing it is recommended to expose the data nodes.  This can be achieved with the following service"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v1\nkind: Service\nmetadata:\n  name: expose-nodes\n  namespace: opni-cluster-system\n  labels:\n    opster.io/opensearch-cluster: opni\n    opster.io/opensearch-nodepool: nodes\nspec:\n  ports:\n  - name: http\n    port: 9200\n    protocol: TCP\n    targetPort: 9200\n  selector:\n    opster.io/opensearch-cluster: opni\n    opster.io/opensearch-nodepool: nodes\n  type: NodePort\n")),(0,r.kt)("p",null,"If you are using a Load Balancer you can change the service type to LoadBalancer and if you do choose to use a ClusterIP you will also need an ingress for the service."),(0,r.kt)("h3",{id:"opensearch-cluster-binding"},"Opensearch Cluster Binding"),(0,r.kt)("p",null,"Next you will need to create an Opensearch Cluster Binding.  This triggers Opni to install the index policies and generic roles it needs into the Opensearch cluster.  This can be achieved by applying the following manifest:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: opni.io/v1beta2\nkind: MulticlusterRoleBinding\nmetadata:\n  name: opni-logging\n  namespace: opni-cluster-system\nspec:\n  opensearch:\n    name: opni\n    namespace: opni-cluster-system\n  opensearchExternalURL: https://opensearchurl # This should be replaced with the URL that the Opensearch data node service is exposed on\n")),(0,r.kt)("p",null,"If you are using NodePort, you can take the IP address of one of your nodes and then append the port number of the expose-nodes service to get your Opensearch external URL."),(0,r.kt)("h3",{id:"install-opni-gateway"},"Install Opni Gateway"),(0,r.kt)("p",null,"Install the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/rancher/opni-monitoring"},"Opni Gateway")," into the central cluster. This can be completed using the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/rancher/opni-monitoring/blob/main/deploy/helmfile.yaml"},"helmfile")),(0,r.kt)("p",null,"The helm file will create a LoadBalancer service for the gateway endpoints. If you are using a NodePort, you can edit the opni-monitoring service once it has been created and change the type from Load Balancer to Node Port. If you are not using NodePort or a load balancer, you will need an ingress (or kubectl port-forward) for the endpoints."),(0,r.kt)("h3",{id:"generate-a-token-for-bootstrapping-the-cluster"},"Generate a token for bootstrapping the cluster"),(0,r.kt)("p",null,"This can be done in the Opni Gateway UI"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Token UI Screenshot",src:n(3133).Z,width:"811",height:"301"})),(0,r.kt)("h3",{id:"bootstrap-downstream-cluster"},"Bootstrap downstream cluster"),(0,r.kt)("p",null,"The command to bootstrap a logging cluster can be copied from the Clusters section in the UI.  Make sure to select the logging capability."),(0,r.kt)("admonition",{title:"attention",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"The gateway URL should exposed with ssl passthrough.  This is because the client uses cert pinning, and the pins are computed based on the serving certs.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"opnictl bootstrap logging NAME [--insecure-skip-tls-verify] --gateway-url https://OPNI-GATEWAY-URL --token=TOKEN --pin=PIN\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"NAME is the friendly name of the cluster. Different clusters should use a different name."),(0,r.kt)("li",{parentName:"ul"},"OPNI-GATEWAY-URL should be the address of the Opni Gateway API you have exposed."),(0,r.kt)("li",{parentName:"ul"},"TOKEN is the token from the UI."),(0,r.kt)("li",{parentName:"ul"},"PIN is the pin from the UI.")),(0,r.kt)("p",null,"Once this command successfully completes the downstream cluster should begin shipping logs to the exposted Opensearch URL from the binding."))}u.isMDXComponent=!0},165:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/loggingarch-9f90b1d71b59daa5f4f66e7943ff6f21.png"},3133:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/tokencreate-ef56b51c5c252ffab0ddbd95a3dc2460.png"}}]);