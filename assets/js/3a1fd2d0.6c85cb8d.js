"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[116],{5162:(e,t,n)=>{n.d(t,{Z:()=>r});var a=n(7294),l=n(6010);const o="tabItem_Ymn6";function r(e){let{children:t,hidden:n,className:r}=e;return a.createElement("div",{role:"tabpanel",className:(0,l.Z)(o,r),hidden:n},t)}},5488:(e,t,n)=>{n.d(t,{Z:()=>m});var a=n(7462),l=n(7294),o=n(6010),r=n(2389),s=n(7392),i=n(7094),c=n(2466);const u="tabList__CuJ",p="tabItem_LNqP";function d(e){var t;const{lazy:n,block:r,defaultValue:d,values:m,groupId:h,className:g}=e,b=l.Children.map(e.children,(e=>{if((0,l.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),f=m??b.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),v=(0,s.l)(f,((e,t)=>e.value===t.value));if(v.length>0)throw new Error(`Docusaurus error: Duplicate values "${v.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const k=null===d?d:d??(null==(t=b.find((e=>e.props.default)))?void 0:t.props.value)??b[0].props.value;if(null!==k&&!f.some((e=>e.value===k)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${k}" but none of its children has the corresponding value. Available values are: ${f.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:y,setTabGroupChoices:w}=(0,i.U)(),[N,T]=(0,l.useState)(k),x=[],{blockElementScrollPositionUntilNextRender:C}=(0,c.o5)();if(null!=h){const e=y[h];null!=e&&e!==N&&f.some((t=>t.value===e))&&T(e)}const _=e=>{const t=e.currentTarget,n=x.indexOf(t),a=f[n].value;a!==N&&(C(t),T(a),null!=h&&w(h,String(a)))},I=e=>{var t;let n=null;switch(e.key){case"ArrowRight":{const t=x.indexOf(e.currentTarget)+1;n=x[t]??x[0];break}case"ArrowLeft":{const t=x.indexOf(e.currentTarget)-1;n=x[t]??x[x.length-1];break}}null==(t=n)||t.focus()};return l.createElement("div",{className:(0,o.Z)("tabs-container",u)},l.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":r},g)},f.map((e=>{let{value:t,label:n,attributes:r}=e;return l.createElement("li",(0,a.Z)({role:"tab",tabIndex:N===t?0:-1,"aria-selected":N===t,key:t,ref:e=>x.push(e),onKeyDown:I,onFocus:_,onClick:_},r,{className:(0,o.Z)("tabs__item",p,null==r?void 0:r.className,{"tabs__item--active":N===t})}),n??t)}))),n?(0,l.cloneElement)(b.filter((e=>e.props.value===N))[0],{className:"margin-top--md"}):l.createElement("div",{className:"margin-top--md"},b.map(((e,t)=>(0,l.cloneElement)(e,{key:t,hidden:e.props.value!==N})))))}function m(e){const t=(0,r.Z)();return l.createElement(d,(0,a.Z)({key:String(t)},e))}},2343:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>r,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var a=n(7462),l=(n(7294),n(3905));n(5488),n(5162),n(814);const o={title:"Install and Config OpenTelemetry-Collector",slug:"/guilds/install-otel-collector/index"},r=void 0,s={unversionedId:"guides/install-otel-collector/index",id:"guides/install-otel-collector/index",title:"Install and Config OpenTelemetry-Collector",description:"Install using Helm",source:"@site/docs/guides/install-otel-collector/index.md",sourceDirName:"guides/install-otel-collector",slug:"/guilds/install-otel-collector/index",permalink:"/guilds/install-otel-collector/index",draft:!1,editUrl:"https://github.com/rancher/opni-docs/edit/main/docs/guides/install-otel-collector/index.md",tags:[],version:"current",frontMatter:{title:"Install and Config OpenTelemetry-Collector",slug:"/guilds/install-otel-collector/index"},sidebar:"tutorialSidebar",previous:{title:"Quick Start using Rancher Desktop",permalink:"/guides/rancher-desktop/"},next:{title:"Prometheus Data Import",permalink:"/guides/prometheus-import"}},i={},c=[{value:"Install using Helm",id:"install-using-helm",level:3},{value:"Validate the installation",id:"validate-the-installation",level:3},{value:"Trace Analytic Dashboard",id:"trace-analytic-dashboard",level:3}],u={toc:c};function p(e){let{components:t,...o}=e;return(0,l.kt)("wrapper",(0,a.Z)({},u,o,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h3",{id:"install-using-helm"},"Install using Helm"),(0,l.kt)("p",null,"Add the helm repo of open-telemetry"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"helm repo add open-telemetry https://open-telemetry.github.io/opentelemetry-helm-charts\n")),(0,l.kt)("p",null,"opentelemetry-collector should be installed with custom chart value file, so that it exports traces to Opni agent's data shipper port ",(0,l.kt)("inlineCode",{parentName:"p"},"21890"),". Here is a sample yaml ",(0,l.kt)("inlineCode",{parentName:"p"},"ot-collector-helm-values.yaml"),":"),(0,l.kt)("details",null,(0,l.kt)("summary",null,"A sample custom chart value yaml"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"config:\n    processors:\n        k8sattributes:\n        passthrough: false\n        auth_type: \"kubeConfig\"\n        extract:\n            metadata:\n            # extract the following well-known metadata fields\n            - podName\n            - podUID\n            - deployment\n            - cluster\n            - namespace\n            - node\n            - startTime\n    exporters:\n        logging: {}\n        otlp/data-prepper:\n        endpoint: <Data-Prepper-Endpoint> # example: opni-shipper.opni-agent.svc:21890\n        tls:\n            insecure: true\n\n    service:\n        extensions: [health_check]\n        pipelines:\n        traces:\n            receivers: [otlp]\n            processors: [memory_limiter, batch, k8sattributes]\n            exporters: [logging, otlp/data-prepper]\n\n    # disable ports that are not required\n    ports:\n    jaeger-binary:\n        enabled: false\n    jaeger-compact:\n        enabled: false\n    jaeger-grpc:\n        enabled: false\n    jaeger-http:\n        enabled: false\n    zipkin:\n        enabled: false\n\n    # k8sProcessor:\n    #   rbac:\n    #     name: \"microservices-tagger\"\n    #     create: true\n\n    serviceAccount:\n    create: true\n\n    resources:\n    limits:\n        cpu: 500m\n        memory: 2Gi\n    requests:\n        cpu: 200m\n        memory: 400Mi\n\n    clusterRole:\n    # Specifies whether a clusterRole should be created\n    create: true\n    # Annotations to add to the clusterRole\n    annotations: {}\n    # The name of the clusterRole to use.\n    # If not set and create is true, a name is generated using the fullname template\n    name: \"ot-collector-clusterrole\"\n    # A set of rules as documented here : https://kubernetes.io/docs/reference/access-authn-authz/rbac/\n    rules:\n    - apiGroups:\n        - ''\n        resources:\n        - 'pods'\n        - 'nodes'\n        verbs:\n        - 'get'\n        - 'list'\n        - 'watch'\n\n    clusterRoleBinding:\n        # Annotations to add to the clusterRoleBinding\n        annotations: {}\n        # The name of the clusterRoleBinding to use.\n        # If not set and create is true, a name is generated using the fullname template\n        name: \"ot-collector-clusterrolebinding\"\n\nmode: deployment\n")),(0,l.kt)("p",null,"Replace ",(0,l.kt)("inlineCode",{parentName:"p"},"<Data-Prepper-Endpoint>")," with the endpoint of ",(0,l.kt)("inlineCode",{parentName:"p"},"opni-shipper")," service with port ",(0,l.kt)("inlineCode",{parentName:"p"},"21890"),".\n",(0,l.kt)("img",{alt:"GetOpniShipper",src:n(3657).Z,width:"2154",height:"98"}))),(0,l.kt)("p",null,"Run the command to install opentelemetry-collector, it should be installed to the ",(0,l.kt)("em",{parentName:"p"},"same namespace with your workload apps"),", and release name must be ",(0,l.kt)("em",{parentName:"p"},"opentelemetry-collector"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"helm install opentelemetry-collector open-telemetry/opentelemetry-collector --values ot-collector-helm-values.yaml\n")),(0,l.kt)("h3",{id:"validate-the-installation"},"Validate the installation"),(0,l.kt)("p",null,"Check the logs of the pod ",(0,l.kt)("inlineCode",{parentName:"p"},"opentelemetry-collector"),", if you see logs like\n",(0,l.kt)("img",{alt:"ValidateTraceEnable",src:n(9420).Z,width:"1968",height:"324"}),"\nyou are good to go."),(0,l.kt)("h3",{id:"trace-analytic-dashboard"},"Trace Analytic Dashboard"),(0,l.kt)("p",null,"Head to the Opensearch Dashboards. Head to the Trace Analytics view from Home -> OpenSearch Plugins -> Trace Analytics. You should see traces populate there\n",(0,l.kt)("img",{alt:"TraceAnalyticPage",src:n(4537).Z,width:"3582",height:"1842"})))}p.isMDXComponent=!0},3657:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/get_opni_shipper-c63ff35dcb4bfd81c3350d2658dca835.png"},4537:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/trace_analytic_page-f98ac0dc7bc37aea4fd725309e7a56be.png"},9420:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/validate_trace_enable-f6b1d4769f671809f55ed223ca0a0528.png"}}]);