"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[89],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>u});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),s=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=s(r),u=a,f=d["".concat(p,".").concat(u)]||d[u]||m[u]||o;return r?n.createElement(f,i(i({ref:t},c),{},{components:r})):n.createElement(f,i({ref:t},c))}));function u(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=r[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},3947:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var n=r(7462),a=(r(7294),r(3905));const o={title:"NATS"},i=void 0,l={unversionedId:"configuration/nats",id:"configuration/nats",title:"NATS",description:"Opni requires a NATS cluster to enable communication between services. The deployment of a NATS cluster is configured by a subsection of the OpniCluster resource.",source:"@site/docs/configuration/nats.md",sourceDirName:"configuration",slug:"/configuration/nats",permalink:"/configuration/nats",draft:!1,editUrl:"https://github.com/rancher/opni-docs/edit/main/docs/configuration/nats.md",tags:[],version:"current",frontMatter:{title:"NATS"}},p={},s=[{value:"Custom Resource Specs",id:"custom-resource-specs",level:3},{value:"NatsSpec",id:"natsspec",level:4}],c={toc:s};function m(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Opni requires a NATS cluster to enable communication between services. The deployment of a NATS cluster is configured by a subsection of the ",(0,a.kt)("a",{parentName:"p",href:"/configuration/opnicluster"},"OpniCluster")," resource."),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"example.yaml")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: opni.io/v1beta1\nkind: OpniCluster\nmetadata:\n  name: example\n  namespace: opni\nspec:\n  nats:\n    authMethod: nkey\n")),(0,a.kt)("h3",{id:"custom-resource-specs"},"Custom Resource Specs"),(0,a.kt)("h4",{id:"natsspec"},"NatsSpec"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:"left"},"Field"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Required"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},"authMethod"),(0,a.kt)("td",{parentName:"tr",align:"left"},"No"),(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("em",{parentName:"td"},"string")),(0,a.kt)("td",{parentName:"tr",align:"left"},"Must be either ",(0,a.kt)("inlineCode",{parentName:"td"},"username")," or ",(0,a.kt)("inlineCode",{parentName:"td"},"nkey"),".  Defaults to ",(0,a.kt)("inlineCode",{parentName:"td"},"nkey"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},"replicas"),(0,a.kt)("td",{parentName:"tr",align:"left"},"No"),(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("em",{parentName:"td"},"int")),(0,a.kt)("td",{parentName:"tr",align:"left"},"Number of NATS replicas to deploy (should be an odd number).  Defaults to ",(0,a.kt)("inlineCode",{parentName:"td"},"3"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},"username"),(0,a.kt)("td",{parentName:"tr",align:"left"},"No"),(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("em",{parentName:"td"},"string")),(0,a.kt)("td",{parentName:"tr",align:"left"},"Username to use with the ",(0,a.kt)("inlineCode",{parentName:"td"},"username")," auth method.  If not set defaults to ",(0,a.kt)("inlineCode",{parentName:"td"},"nats-user"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},"passwordFrom"),(0,a.kt)("td",{parentName:"tr",align:"left"},"No"),(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("a",{parentName:"td",href:"https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.22/#secretkeyselector-v1-core"},"SecretKeySelector")),(0,a.kt)("td",{parentName:"tr",align:"left"},"Secret key containing the password to use.  If not set then a random password will be generated and used")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},"nodeSelector"),(0,a.kt)("td",{parentName:"tr",align:"left"},"No"),(0,a.kt)("td",{parentName:"tr",align:"left"},"map"),(0,a.kt)("td",{parentName:"tr",align:"left"},"NodeSelector for the cluster pods.  If this exists it will override the globalNodeSelector")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},"tolerations"),(0,a.kt)("td",{parentName:"tr",align:"left"},"No"),(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("a",{parentName:"td",href:"https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.22/#toleration-v1-core"},"Toleration")," ",(0,a.kt)("em",{parentName:"td"},"array")),(0,a.kt)("td",{parentName:"tr",align:"left"},"Tolerations for the cluster pods.  These will be combined with the globalTolerations (if any)")))))}m.isMDXComponent=!0}}]);