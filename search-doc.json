[{"title":"Opni Log Anomaly Setup","type":0,"sectionRef":"#","url":"log-anomaly/","content":"","keywords":""},{"title":"Setup Opni Logging​","type":1,"pageTitle":"Opni Log Anomaly Setup","url":"log-anomaly/#setup-opni-logging","content":"To setup Opni Log Anomaly, first follow the instructions here to setup a central Opni cluster and at least one downstream cluster boostrapped to ship logs over to the central Opni cluster. "},{"title":"Setup Opni Log Anomaly​","type":1,"pageTitle":"Opni Log Anomaly Setup","url":"log-anomaly/#setup-opni-log-anomaly","content":"To set up log anomaly detection, apply this yaml file to your central Opni cluster. apiVersion: opni.io/v1beta2 kind: OpniCluster metadata: name: opni-log-anomaly namespace: opni-cluster-system spec: version: v0.4.0 deployLogCollector: false services: gpuController: enabled: false inference: enabled: true imagePullPolicy: Always pretrainedModels: - name: control-plane metrics: enabled: false opensearch: externalOpensearch: name: opni namespace: opni-cluster-system s3: internal: {} nats: authMethod: nkey --- apiVersion: opni.io/v1beta2 kind: PretrainedModel metadata: name: control-plane namespace: opni-cluster-system spec: source: http: url: &quot;https://opni-public.s3.us-east-2.amazonaws.com/pretrain-models/control-plane-model-v0.4.0.zip&quot; hyperparameters: modelThreshold: &quot;0.6&quot; minLogTokens: 1 isControlPlane: &quot;true&quot;  "},{"title":"Opni - Multi-Cluster Observability with AIOps","type":0,"sectionRef":"#","url":"","content":"","keywords":""},{"title":"Opni Components​","type":1,"pageTitle":"Opni - Multi-Cluster Observability with AIOps","url":"#opni-components","content":"The three key elements of observability are logs, metrics, and traces. Observability backends and agents handle the collection and storage of this data. AIOps aids in understanding this observability data, and Opni encompasses all these components. Observability BackendsObservability AgentsAIOpsAlerting and SLOs Observability backends receive and store various data types. Opni, designed with Kubernetes in mind, builds on popular open-source tools to serve as backends. Although these backends can be challenging to set up, Opni streamlines their creation and management. Currently, you can create the following: Opni Logging - enhances Opensearch for easy searching, visualization, and analysis of logs, traces, and Kubernetes eventsOpni Monitoring - extends Cortex for multi-cluster, long-term storage of Prometheus metrics "},{"title":"Quick Start using Rancher Desktop","type":0,"sectionRef":"#","url":"guides/rancher-desktop/","content":"","keywords":""},{"title":"Prerequisites​","type":1,"pageTitle":"Quick Start using Rancher Desktop","url":"guides/rancher-desktop/#prerequisites","content":"Rancher Desktop is installed and configured on your machine. "},{"title":"Install Rancher Desktop on your computer​","type":1,"pageTitle":"Quick Start using Rancher Desktop","url":"guides/rancher-desktop/#install-rancher-desktop-on-your-computer","content":"Follow the official documentation to install Rancher Desktop. Once installed, it creates a local k3s cluster on your machine and installs the command line tools you need to deploy apps to it (kubectl/nerdctl/helm). Make sure to switch k8s context to the local k3s cluster in Rancher Desktop and validate it "},{"title":"Configure Rancher Desktop​","type":1,"pageTitle":"Quick Start using Rancher Desktop","url":"guides/rancher-desktop/#configure-rancher-desktop","content":"Allocate enough resource to the local k3s cluster. Opni requires 8 CPUs and 8GB Memory at a minimum. "},{"title":"Install Opni​","type":1,"pageTitle":"Quick Start using Rancher Desktop","url":"guides/rancher-desktop/#install-opni","content":"Here is an example of using Helm to install Opni. For more details please refer to here 1. Install cert-manager kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.10.0/cert-manager.yaml  2. config chart value. Select noauth as auth provider and input your hostname and grafana.hostname. This is a sample values.yaml file: gateway: # Set a hostname for the Opni Gateway API. This must be accessible to all agents. hostname: &lt;your-hostname&gt; # required auth: # Set an auth provider. Available options are &quot;openid&quot; and &quot;noauth&quot;. provider: &quot;noauth&quot; # If using the &quot;openid&quot; provider: openid: # discovery and wellKnownConfiguration are mutually exclusive. # If the OP (openid provider) has a discovery endpoint, it should be # configured in the discovery field, otherwise the well-known configuration # fields can be set manually. If set, required fields are listed below. discovery: # Relative path at which to find the openid configuration. # Defaults to &quot;/.well-known/openid-configuration&quot;. path: &quot;/.well-known/openid-configuration&quot; # The OP's Issuer identifier. This must exactly match the issuer URL # obtained from the discovery endpoint, and will match the `iss' claim # in the ID Tokens issued by the OP. issuer: &quot;&quot; # required # The ID Token claim that will be used to identify users (&quot;sub&quot;, &quot;email&quot;, etc.). # The value of this field will be matched against role binding subject names. # Defaults to &quot;sub&quot;. identifyingClaim: &quot;sub&quot; clientID: &quot;&quot; # required clientSecret: &quot;&quot; # required # OAuth scopes that will be requested by the client. Defaults to [&quot;openid&quot;, &quot;profile&quot;, &quot;email&quot;]. scopes: [&quot;openid&quot;, &quot;profile&quot;, &quot;email&quot;] # https://grafana.com/docs/grafana/v9.0/setup-grafana/configure-security/configure-authentication/generic-oauth/#roles roleAttributePath: # required # Optional manually-provided discovery information. Mutually exclusive with # the discovery field (see above). If set, required fields are listed below. wellKnownConfiguration: issuer: &quot;&quot; # required authorization_endpoint: &quot;&quot; # required token_endpoint: &quot;&quot; # required userinfo_endpoint: &quot;&quot; # required jwks_uri: &quot;&quot; # required # revocation_endpoint: &quot;&quot; # scopes_supported: [] # response_types_supported: [] # response_modes_supported: [] # id_token_signing_alg_values_supported: [] # token_endpoint_auth_methods_supported: [] # claims_supported: [] # request_uri_parameter_supported: false # If using the &quot;noauth&quot; provider: noauth: # Set a hostname where the grafana dashboard will be accessible. This value # is the grafana oauth redirect URL for the noauth provider. grafanaHostname: &lt;your-grafana-hostname&gt; # required opni-agent: # Embedded kube-prometheus-stack chart. Only the following components will be installed: # - prometheus operator # - kube state metrics # - node exporter # - default service monitors and rules kube-prometheus-stack: enabled: true opni-prometheus-crd: # set to false if `opni-agent.kube-prometheus-stack.enabled` is true enabled: false  3. Add the Opni Helm repository: helm repo add opni https://raw.githubusercontent.com/rancher/opni/charts-repo  helm repo update  4. Install the CRDs chart: helm -n opni install --create-namespace opni-crd opni/opni-crd  5. Install the Opni chart: helm -n opni install opni opni/opni -f values.yaml  "},{"title":"Validate Installation​","type":1,"pageTitle":"Quick Start using Rancher Desktop","url":"guides/rancher-desktop/#validate-installation","content":"Run the following command to validate Opni has been installed in namespace Opni "},{"title":"Next Steps​","type":1,"pageTitle":"Quick Start using Rancher Desktop","url":"guides/rancher-desktop/#next-steps","content":"Enable BackendsEnable AIOpsEnable SLOs "},{"title":"Opni Alerting : User Guide","type":0,"sectionRef":"#","url":"guides/alerting/","content":"","keywords":""},{"title":"Prerequisites​","type":1,"pageTitle":"Opni Alerting : User Guide","url":"guides/alerting/#prerequisites","content":"Access to the admin UIOpni-Alerting backend is installed "},{"title":"Endpoints​","type":1,"pageTitle":"Opni Alerting : User Guide","url":"guides/alerting/#endpoints","content":"In order to get started, head to the 'Endpoints' tab under 'Alerting' in the left sidebar of the admin UI  To create a new endpoint, click the top-right 'Create' button to open the create UI "},{"title":"Slack​","type":1,"pageTitle":"Opni Alerting : User Guide","url":"guides/alerting/#slack","content":"Using slack requires a : Valid incoming slack webhookValid slack channel note See the official slack docs for setup instructions    caution If the specified channel does not exist, or your slackbot does not have appropriate permissions to send messages to the specified channel, it will send the alert to its default channel. To validate your inputs, hit the 'Test Endpoint' button to make sure opni alerting can dispatch messages to your configured endpoint. If your inputs are correct, you should receive a test message:    When you are done, hit the 'Save' button. "},{"title":"Email​","type":1,"pageTitle":"Opni Alerting : User Guide","url":"guides/alerting/#email","content":"Using email endpoint requires its own smtp server, which will require: To email : valid recipient for this endpointFrom email : valid sender for this emailSmart Host : &lt;url&gt;:&lt;port&gt; for your SMTP server setupSmtp Identity : Identity to use with your SMTP serverSmtp username : Auth username credential for SMTP serverSmtp Password : Auth password credential for SMTP server    note SMTP server configurations will be specific to your IT or production setup To validate your inputs, hit the 'Test Endpoint' button to make sure opni alerting can dispatch messages to your configured endpoint. When you are done, hit the 'Save' button. "},{"title":"PagerDuty​","type":1,"pageTitle":"Opni Alerting : User Guide","url":"guides/alerting/#pagerduty","content":"Using PagerDuty requires a PagerDuty integration key. note See the official PagerDuty docs on integration with AlertManager for generating integration keys  "},{"title":"Alarms​","type":1,"pageTitle":"Opni Alerting : User Guide","url":"guides/alerting/#alarms","content":"Alarms are used to evaluate whether or not some external condition should dispatch a notification to the configured endpoints caution Alarms will fire without attached endpoints, but if you do not attach any endpoints to your alarm it will not dispatch to any endpoints (it will still show as firing in the opni UI). "},{"title":"State​","type":1,"pageTitle":"Opni Alerting : User Guide","url":"guides/alerting/#state","content":"Unkown : State can't be reported or analyzed by Opni-AlertingOk : The alarm is fineFiring : The alarm has met its condition, expect to eventually receive a notification, depending on your settingsSilenced : The alarm is firing but has been silence by the User.Invalidated : The alarm can no longer evaluate to Ok or Firing, usually due to uninstalling external requirements. "},{"title":"Overview​","type":1,"pageTitle":"Opni Alerting : User Guide","url":"guides/alerting/#overview","content":"Overview tab will display a timeline of when alarms have fired.  "},{"title":"Editing / Deleting Alarms​","type":1,"pageTitle":"Opni Alerting : User Guide","url":"guides/alerting/#editing--deleting-alarms","content":"In order to edit or delete alarms right click the condition you want to edit or delete :  "},{"title":"Cloning​","type":1,"pageTitle":"Opni Alerting : User Guide","url":"guides/alerting/#cloning","content":"attention Cloning alarms with specific external requirements to other cluster(s) may result in invalidated state alerts if those requirements are not met by the target cluster(s) As above, you can right click the alarm you want to clone, which will open a menu to select which clusters you want to clone to.    You are allowed to clone to the same cluster, as well as clone any number of times to any cluster. "},{"title":"Alarm Types​","type":1,"pageTitle":"Opni Alerting : User Guide","url":"guides/alerting/#alarm-types","content":""},{"title":"Agent Disconnect​","type":1,"pageTitle":"Opni Alerting : User Guide","url":"guides/alerting/#agent-disconnect","content":"Alerts when an agent disconnects within the specified timeout. By default, whenever an agent is bootstrapped, for example consider this agent :    A matching agent disconnect condition is created with a 10 minute timeout.    note You are free to edit or delete this default condition as you see fit.  Options​    Cluster : agent this alarm applies toTimeout : how long this agent has been disconnect before firing an alarm Recommended Options​ Timeout : 10 or more minutes "},{"title":"Downstream Capability​","type":1,"pageTitle":"Opni Alerting : User Guide","url":"guides/alerting/#downstream-capability","content":"Alerts when an agent capability, e.g. Logging or Metrics, is in some unhealthy state for a certain amount of time. By default when an agent is bootstrapped, a matching downstream capability alarm is created that will alert if any unhealthy state is sustained over a period of 10 minutes.    note You are free to edit or delete this default condition as you see fit. Options​    Cluster : cluster this applies toDuration : period after which we decide to fire an alaramOne ore more capability states to track : Failure : An agent capability is experiencing errorsPending : A setup step or sync operation is hanging Recommended Options​ Duration : 10 or more minutes "},{"title":"Monitoring Backend​","type":1,"pageTitle":"Opni Alerting : User Guide","url":"guides/alerting/#monitoring-backend","content":"attention Requires the monitoring backend to be installed Alerts when the specified monitoring backend components are in an unhealthy state over some period of time Options​    Duration : period after which we should fire an alarm if the specified backend components are unhealthy, recommended to be 10 minutes or moreBackend components : store-gateway : responsible for persistent &amp; remote storage, critical component.distributor : responsible for distributing remote writes to the ingesteringester : responsible for (persistent) buffering of incoming dataruler : responsible for applying stored prometheus queries and prometheus alertspurger : responsible for deleting cluster datacompactor : responsible for buffer compaction before sending to persistent storagequery-frontend : &quot;api gateway&quot; for the querierquerier : handles prometheus queries from the user Recommended options​ Duration : 10 minutes or more, but no more than 90 minsBackend Components : track store-gateway, distributor, ingester &amp; compactor as a high severity alarmtrack all components as a lesser severity alarm "},{"title":"Prometheus Query​","type":1,"pageTitle":"Opni Alerting : User Guide","url":"guides/alerting/#prometheus-query","content":"Alerts when the given prometheus query evaluates to True  attention Requires the monitoring backend to be installed &amp; one or more downstream agents to have the metrics capability. Options​    note The above query should always evaluate to true, and subsequently evaluate to firing. It can be used to sanity check your downstream agents with metrics installed. Cluster : any cluster with an agent with metrics capabilitiesDuration : period after which we should fire an alertQuery : any valid prometheus query "},{"title":"Kube State​","type":1,"pageTitle":"Opni Alerting : User Guide","url":"guides/alerting/#kube-state","content":"attention Requires the monitoring backend to be installed and have one or more agents that have both metrics capabilities and kube-state-metrics enabled. Alerts when the desired kubernetes object on the cluster is in the state specified by the user for a certain amount of time. Options​    note The above configuration will alert if the opni gateway is in fact running for more than 5 minutes. It can be used to sanity check that your kube-state-metrics are working as intended. "},{"title":"General Alarm Options​","type":1,"pageTitle":"Opni Alerting : User Guide","url":"guides/alerting/#general-alarm-options","content":""},{"title":"Attaching endpoint(s) to an Alarm​","type":1,"pageTitle":"Opni Alerting : User Guide","url":"guides/alerting/#attaching-endpoints-to-an-alarm","content":"Right click edit your condition, and navigate to the message options tab in the edit UI &amp; click 'Add Endpoint'    From here you can add a list of your configured endpoints to your alarm:    You must specify Message options for the contents &amp; dispatching configuration to your endpoint : Title : header for your particular endpointBody : content of the messageInitial Delay : time for backend to wait before sending alertRepeat interval : how often to repeat the alert when it firesThrottling duration : Throttle (delay) all alerts received from the same source by X minutes    Based on the implementation details above, once we hit 'Save' and our downstream agent has disconnected for &gt; 10mins, you will receive an alert:  "},{"title":"Silencing an Alarm​","type":1,"pageTitle":"Opni Alerting : User Guide","url":"guides/alerting/#silencing-an-alarm","content":"If operators with to silence a firing alarm, which will cause the alarm to no longer send any notifications to endpoints, then consider :    They can do so by right clicking edit and navigating to the silence tab:    Once the alarm is silenced, operators can always un-silence it by clicking the resume now.    Tada! the alarm is silenced.    note You can silence alarms that are not in the firing state, and they will prevent any notifications from being sent to endpoints if that alarm does enter the firing state "},{"title":"Opni Logging Setup","type":0,"sectionRef":"#","url":"logging/","content":"","keywords":""},{"title":"Install cert manager in all clusters​","type":1,"pageTitle":"Opni Logging Setup","url":"logging/#install-cert-manager-in-all-clusters","content":"All clusters need cert manager as a prerequisite. This can be installed by following the cert manager instructions "},{"title":"Rancher Charts​","type":1,"pageTitle":"Opni Logging Setup","url":"logging/#rancher-charts","content":"Opni provides helm charts that integrate with Rancher. If you are using Rancher you can add these to the UI by adding a git repository to the Apps &amp; Marketplace section. The Git Repo URL to use is: https://github.com/rancher/opni.git  The Git Branch to use is: charts-repo  If you are not using Rancher please follow the instructions below. "},{"title":"Install Opni​","type":1,"pageTitle":"Opni Logging Setup","url":"logging/#install-opni","content":"Opni needs to be installed into all clusters - the centralized cluster, and the downstream clusters that will be shipping their logs. This can be achieved by applying the following manifests from the Opni repo 00_crds.yaml01_rbac.yaml10_operator.yaml "},{"title":"Install Opensearch​","type":1,"pageTitle":"Opni Logging Setup","url":"logging/#install-opensearch","content":"Opni makes use of, and contributes to, the official Opensearch operator. This is currently hosted at https://github.com/Opster/opensearch-k8s-operator. The cluster must be called Opni and installed into the opni-cluster-system namespace. Create this namespace on your cluster if it does not already exist. The following yaml can be used to create the cluster apiVersion: opensearch.opster.io/v1 kind: OpenSearchCluster metadata: name: opni namespace: opni-cluster-system spec: # Add fields here general: httpPort: 9200 vendor: opensearch version: 1.3.1 serviceName: os-svc setVMMaxMapCount: true confMgmt: autoScaler: false monitoring: false dashboards: enable: true version: 1.3.1 replicas: 1 image: rancher/opensearch-dashboards:1.3.1 nodePools: - component: master replicas: 3 diskSize: 32Gi resources: requests: cpu: 500m memory: 1Gi limits: memory: 1Gi roles: - master persistence: emptyDir: {} - component: nodes replicas: 2 diskSize: 32Gi resources: requests: cpu: 500m memory: 2Gi limits: memory: 2Gi jvm: &quot;-Xmx1G -Xms1G&quot; roles: - data persistence: emptyDir: {}  If you want to use persistent storage you can replace emptyDir: {}  with pvc: storageClass: nameofclass # Name of the storage class you wish to use accessModes: - ReadWriteOnce  You will also need to expose the Opensearch cluster. For indexing it is recommended to expose the data nodes. This can be achieved with the following service apiVersion: v1 kind: Service metadata: name: expose-nodes namespace: opni-cluster-system labels: opster.io/opensearch-cluster: opni opster.io/opensearch-nodepool: nodes spec: ports: - name: http port: 9200 protocol: TCP targetPort: 9200 selector: opster.io/opensearch-cluster: opni opster.io/opensearch-nodepool: nodes type: NodePort  If you are using a Load Balancer you can change the service type to LoadBalancer and if you do choose to use a ClusterIP you will also need an ingress for the service. "},{"title":"Opensearch Cluster Binding​","type":1,"pageTitle":"Opni Logging Setup","url":"logging/#opensearch-cluster-binding","content":"Next you will need to create an Opensearch Cluster Binding. This triggers Opni to install the index policies and generic roles it needs into the Opensearch cluster. This can be achieved by applying the following manifest: apiVersion: opni.io/v1beta2 kind: MulticlusterRoleBinding metadata: name: opni-logging namespace: opni-cluster-system spec: opensearch: name: opni namespace: opni-cluster-system opensearchExternalURL: https://opensearchurl # This should be replaced with the URL that the Opensearch data node service is exposed on  If you are using NodePort, you can take the IP address of one of your nodes and then append the port number of the expose-nodes service to get your Opensearch external URL. "},{"title":"Install Opni Gateway​","type":1,"pageTitle":"Opni Logging Setup","url":"logging/#install-opni-gateway","content":"Install the Opni Gateway into the central cluster. This can be completed using the helmfile The helm file will create a LoadBalancer service for the gateway endpoints. If you are using a NodePort, you can edit the opni-monitoring service once it has been created and change the type from Load Balancer to Node Port. If you are not using NodePort or a load balancer, you will need an ingress (or kubectl port-forward) for the endpoints. "},{"title":"Generate a token for bootstrapping the cluster​","type":1,"pageTitle":"Opni Logging Setup","url":"logging/#generate-a-token-for-bootstrapping-the-cluster","content":"This can be done in the Opni Gateway UI  "},{"title":"Bootstrap downstream cluster​","type":1,"pageTitle":"Opni Logging Setup","url":"logging/#bootstrap-downstream-cluster","content":"The command to bootstrap a logging cluster can be copied from the Clusters section in the UI. Make sure to select the logging capability. attention The gateway URL should exposed with ssl passthrough. This is because the client uses cert pinning, and the pins are computed based on the serving certs. opnictl bootstrap logging NAME [--insecure-skip-tls-verify] --gateway-url https://OPNI-GATEWAY-URL --token=TOKEN --pin=PIN  NAME is the friendly name of the cluster. Different clusters should use a different name.OPNI-GATEWAY-URL should be the address of the Opni Gateway API you have exposed.TOKEN is the token from the UI.PIN is the pin from the UI. Once this command successfully completes the downstream cluster should begin shipping logs to the exposted Opensearch URL from the binding. "}]